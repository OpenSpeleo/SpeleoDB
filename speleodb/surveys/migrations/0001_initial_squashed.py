# Generated by Django 5.2.4 on 2025-07-23 00:51

import django.core.validators
import django_countries.fields
import speleodb.surveys.fields
import speleodb.utils.storages
import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ('surveys', '0001_initial'), 
        ('surveys', '0002_alter_permission_level'), 
        ('surveys', '0003_alter_project_latitude_alter_project_longitude'), 
        ('surveys', '0004_project_country'), 
        ('surveys', '0005_remove_project_mutex_dt_remove_project_mutex_owner_and_more'), 
        ('surveys', '0006_project_software'), 
        ('surveys', '0007_rename_level_permission__level_and_more'), 
        ('surveys', '0008_permission_creation_date_permission_is_active_and_more'), 
        ('surveys', '0009_rename_heartbeat_dt_mutex_last_modified_dt_and_more'), 
        ('surveys', '0010_alter_permission__level'), 
        ('surveys', '0011_alter_project_description'), 
        ('surveys', '0012_rename_creation_dt_mutex_creation_date_and_more'),
        ('surveys', '0013_remove_project__software_format'), 
        ('surveys', '0014_alter_format__format'), 
        ('surveys', '0015_alter_format__format'), 
        ('surveys', '0016_teampermission_userpermission_delete_permission'),
        ('surveys', '0017_project_created_by'), 
        ('surveys', '0018_remove_project_active_mutex'), 
        ('surveys', '0019_project_latitude_longitude_must_both_me_null_not_null_simultaneously'), 
        ('surveys', '0020_alter_mutex_user'), 
        ('surveys', '0021_remove_teampermission__level_and_more'), 
        ('surveys', '0022_publicannoucement'), 
        ('surveys', '0023_pluginrelease'), 
        ('surveys', '0024_change_software_version_to_min_max'), 
        ('surveys', '0025_project_geojson'), 
        ('surveys', '0026_update_permission_levels_add_webviewer'), 
        ('surveys', '0027_alter_project_latitude_alter_project_longitude_and_more'), 
        ('surveys', '0028_station_stationresource_pointofinterest'), 
        ('surveys', '0029_alter_pointofinterest_name_and_more'), 
        ('surveys', '0030_normalize_uuid_fields_accross_app'), 
        ('surveys', '0031_update_teampermission_for_uuid_teams'), 
        ('surveys', '0032_migrate_teampermission_fk_to_uuid'), 
        ('surveys', '0033_alter_project_created_by_alter_station_created_by_and_more'), 
        ('surveys', '0034_mutex_is_active')
    ]

    initial = True

    dependencies = [
        ('users', '0001_initial_squashed'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_format', models.IntegerField(choices=[(1000, 'OTHER'), (9998, 'AUTO'), (9999, 'DUMP'), (10, 'ARIANE_TML'), (11, 'ARIANE_TMLU'), (12, 'ARIANE_AGR'), (20, 'COMPASS_MAK'), (21, 'COMPASS_DAT'), (30, 'WALLS_SRV'), (31, 'WALLS_WPJ'), (40, 'STICKMAPS')], verbose_name='format')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Mutex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('closing_comment', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'mutexes',
            },
        ),
        migrations.CreateModel(
            name='PluginRelease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plugin_version', speleodb.surveys.fields.VersionField(max_length=50, validators=[django.core.validators.RegexValidator(message='Enter a valid SemVer (e.g., 1.2.3) or CalVer (e.g., 2025.06.23)', regex='(^(?P<major>0|[1-9]\\d*)\\.(?P<minor>0|[1-9]\\d*)\\.(?P<patch>0|[1-9]\\d*)$)|(^(?P<year>2[0-9]{3})\\.(?P<month>1[0-2]|0?[1-9])(\\.(?P<day>3[0-1]|[1-2][0-9]|0?[1-9]))?$)')], verbose_name='Plugin version')),
                ('software', models.IntegerField(choices=[(0, 'WEB'), (1, 'ARIANE')])),
                ('min_software_version', speleodb.surveys.fields.VersionField(blank=True, default='', max_length=50, validators=[django.core.validators.RegexValidator(message='Enter a valid SemVer (e.g., 1.2.3) or CalVer (e.g., 2025.06.23)', regex='(^(?P<major>0|[1-9]\\d*)\\.(?P<minor>0|[1-9]\\d*)\\.(?P<patch>0|[1-9]\\d*)$)|(^(?P<year>2[0-9]{3})\\.(?P<month>1[0-2]|0?[1-9])(\\.(?P<day>3[0-1]|[1-2][0-9]|0?[1-9]))?$)')], verbose_name='Minimum software version')),
                ('max_software_version', speleodb.surveys.fields.VersionField(blank=True, default='', max_length=50, validators=[django.core.validators.RegexValidator(message='Enter a valid SemVer (e.g., 1.2.3) or CalVer (e.g., 2025.06.23)', regex='(^(?P<major>0|[1-9]\\d*)\\.(?P<minor>0|[1-9]\\d*)\\.(?P<patch>0|[1-9]\\d*)$)|(^(?P<year>2[0-9]{3})\\.(?P<month>1[0-2]|0?[1-9])(\\.(?P<day>3[0-1]|[1-2][0-9]|0?[1-9]))?$)')], verbose_name='Maximum software version')),
                ('operating_system', models.IntegerField(choices=[(0, 'ANY'), (10, 'MACOS'), (11, 'MACOS_INTEL'), (12, 'MACOS_ARM'), (20, 'WINDOWS'), (21, 'WINDOWS_32'), (22, 'WINDOWS_64'), (30, 'LINUX'), (31, 'LINUX_32'), (32, 'LINUX_64')], default=0)),
                ('changelog', models.TextField()),
                ('sha256_hash', speleodb.surveys.fields.Sha256Field(blank=True, max_length=64, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid sha256 value', regex='^[a-fA-F0-9]{64}$')], verbose_name='SHA256 Hash')),
                ('download_url', models.URLField(max_length=500)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PointOfInterest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Point of Interest name', max_length=100)),
                ('description', models.TextField(blank=True, default='', help_text='Optional description of the point of interest')),
                ('latitude', models.DecimalField(decimal_places=7, help_text='POI latitude coordinate', max_digits=10, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.DecimalField(decimal_places=7, help_text='POI longitude coordinate', max_digits=10, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Point of Interest',
                'verbose_name_plural': 'Points of Interest',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('visibility', models.IntegerField(choices=[(0, 'PRIVATE'), (1, 'PUBLIC')], default=0)),
                ('geojson', models.JSONField(blank=True, default=dict, help_text='GeoJSON data for this project. Only loaded when explicitly requested.')),
            ],
        ),
        migrations.CreateModel(
            name='PublicAnnoucement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='UUID')),
                ('title', models.CharField(max_length=255)),
                ('header', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('software', models.IntegerField(choices=[(0, 'WEB'), (1, 'ARIANE')])),
                ('version', speleodb.surveys.fields.VersionField(blank=True, default='', max_length=50, validators=[django.core.validators.RegexValidator(message='Enter a valid SemVer (e.g., 1.2.3) or CalVer (e.g., 2025.06.23)', regex='(^(?P<major>0|[1-9]\\d*)\\.(?P<minor>0|[1-9]\\d*)\\.(?P<patch>0|[1-9]\\d*)$)|(^(?P<year>2[0-9]{3})\\.(?P<month>1[0-2]|0?[1-9])(\\.(?P<day>3[0-1]|[1-2][0-9]|0?[1-9]))?$)')])),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('expiracy_date', models.DateField(blank=True, default=None, null=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Station identifier (e.g., 'A1', 'Station-001')", max_length=100)),
                ('description', models.TextField(blank=True, default='', help_text='Optional description of the station')),
                ('latitude', models.DecimalField(decimal_places=7, help_text='Station latitude coordinate', max_digits=10, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.DecimalField(decimal_places=7, help_text='Station longitude coordinate', max_digits=10, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Station',
                'verbose_name_plural': 'Stations',
                'ordering': ['project', 'name'],
            },
        ),
        migrations.CreateModel(
            name='StationResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('resource_type', models.CharField(choices=[('photo', 'Photo'), ('video', 'Video'), ('sketch', 'Sketch'), ('note', 'Note'), ('document', 'Document')], max_length=20)),
                ('title', models.CharField(help_text='Title or name of the resource', max_length=200)),
                ('description', models.TextField(blank=True, default='', help_text='Optional description of the resource')),
                ('file', models.FileField(blank=True, null=True, storage=speleodb.utils.storages.StationResourceStorage(), upload_to='stations/resources/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'mp4', 'avi', 'mov', 'wmv', 'flv', 'webm', 'pdf', 'doc', 'docx', 'txt', 'rtf', 'svg'])])),
                ('text_content', models.TextField(blank=True, default='', help_text='Text content for notes or sketch SVG data')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Station Resource',
                'verbose_name_plural': 'Station Resources',
                'ordering': ['station', '-modified_date'],
            },
        ),
        migrations.CreateModel(
            name='TeamPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(choices=[(0, 'WEB_VIEWER'), (1, 'READ_ONLY'), (2, 'READ_AND_WRITE'), (3, 'ADMIN')], default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Team Permission',
                'verbose_name_plural': 'Team Permissions',
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(choices=[(0, 'WEB_VIEWER'), (1, 'READ_ONLY'), (2, 'READ_AND_WRITE'), (3, 'ADMIN')], default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Permission',
                'verbose_name_plural': 'User Permissions',
            },
        ),
        migrations.AddField(
            model_name='mutex',
            name='closing_user',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='rel_closing_mutexes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mutex',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_mutexes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='pointofinterest',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pois_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='rel_projects_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='fork_from',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='forks', to='surveys.project'),
        ),
        migrations.AddField(
            model_name='mutex',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_mutexes', to='surveys.project'),
        ),
        migrations.AddField(
            model_name='format',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_formats', to='surveys.project'),
        ),
        migrations.AddField(
            model_name='station',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='rel_stations_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='station',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_stations', to='surveys.project'),
        ),
        migrations.AddField(
            model_name='stationresource',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='rel_station_resources_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='stationresource',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_resources', to='surveys.station'),
        ),
        migrations.AddField(
            model_name='teampermission',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='teampermission',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_team_permissions', to='surveys.project'),
        ),
        migrations.AddField(
            model_name='teampermission',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_permissions', to='users.surveyteam'),
        ),
        migrations.AddField(
            model_name='userpermission',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userpermission',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_user_permissions', to='surveys.project'),
        ),
        migrations.AddField(
            model_name='userpermission',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_permissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='pointofinterest',
            index=models.Index(fields=['latitude', 'longitude'], name='surveys_poi_latitud_22d2b1_idx'),
        ),
        migrations.AddIndex(
            model_name='pointofinterest',
            index=models.Index(fields=['name'], name='surveys_poi_name_59f0fd_idx'),
        ),
        migrations.AddIndex(
            model_name='pointofinterest',
            index=models.Index(fields=['creation_date'], name='surveys_poi_creatio_9acde1_idx'),
        ),
        migrations.AddIndex(
            model_name='pointofinterest',
            index=models.Index(fields=['created_by'], name='surveys_poi_created_7c3dcc_idx'),
        ),
        migrations.AddConstraint(
            model_name='project',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('latitude__isnull', True), ('longitude__isnull', True)), models.Q(('latitude__isnull', False), ('longitude__isnull', False)), _connector='OR'), name='Latitude & Longitude must both me null/not null simultaneously'),
        ),
        migrations.AlterUniqueTogether(
            name='format',
            unique_together={('project', '_format')},
        ),
        migrations.AlterUniqueTogether(
            name='station',
            unique_together={('project', 'name')},
        ),
        migrations.AddConstraint(
            model_name='teampermission',
            constraint=models.CheckConstraint(condition=models.Q(('level__in', [0, 1, 2])), name='surveys_teampermission_level_is_valid'),
        ),
        migrations.AlterUniqueTogether(
            name='teampermission',
            unique_together={('target', 'project')},
        ),
        migrations.AlterUniqueTogether(
            name='userpermission',
            unique_together={('target', 'project')},
        ),
    ]
